package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"html/template"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"

	homedir "github.com/mitchellh/go-homedir"
)

const (
	conf    = ".config/nr"
	cmdTmpl = `#!/usr/bin/env bash
# Generated by nr
{{ .args }} $@
`
)

type alias struct {
	Command string `json:"cmd"`
	Package string `json:"pkg"`
	Channel string `json:"chan"`
}

func main() {
	home, err := homedir.Dir()
	if err != nil {
		log.Fatal(err)
	}
	config, err := ioutil.ReadFile(filepath.Join(home, conf))
	if err != nil {
		log.Fatal(err)
	}
	aliases := []alias{}
	if err := json.Unmarshal(config, &aliases); err != nil {
		log.Fatal(err)
	}
	if err := cleanGenerated(home); err != nil {
		log.Fatal(err)
	}
	if err := generate(home, aliases); err != nil {
		log.Fatal(err)
	}

}

func cleanGenerated(home string) error {
	bins := filepath.Join(home, "bin")
	files, err := ioutil.ReadDir(bins)
	if err != nil {
		return err
	}
	removes := []string{}
	for _, file := range files {
		if file.IsDir() {
			continue
		}
		f, err := os.Open(filepath.Join(bins, file.Name()))
		if err != nil {
			return err
		}
		scanner := bufio.NewScanner(f)
		for scanner.Scan() {
			if strings.HasPrefix(scanner.Text(), "# Generated by nr") {
				removes = append(removes, file.Name())
				break
			}
		}
		f.Close()
	}
	for _, file := range removes {
		if err := os.Remove(filepath.Join(bins, file)); err != nil {
			return err
		}
	}
	return nil
}

func generate(home string, aliases []alias) error {
	t := template.Must(template.New("cmd").Parse(cmdTmpl))
	for _, a := range aliases {
		if _, err := os.Stat(filepath.Join(home, ".nix-profile/bin/", a.Command)); os.IsNotExist(err) {
			// create command
			pkg := a.Package
			if pkg == "" {
				pkg = a.Command
			}
			channel := a.Channel
			if channel == "" {
				channel = "nixpkgs"
			}
			c := []string{"nix", "run", channel + "." + pkg, "-c", a.Command}
			f, err := os.Create(filepath.Join(home, "bin", a.Command))
			if err != nil {
				return err
			}
			if err := t.Execute(f, map[string]interface{}{
				"args": strings.Join(c, " "),
			}); err != nil {
				f.Close()
				return err
			}
			f.Close()
			if err := os.Chmod(filepath.Join(home, "bin", a.Command), 0777); err != nil {
				return err
			}
		} else {
			fmt.Printf("> %s already exists\n", a.Command)
		}
	}
	return nil
}
